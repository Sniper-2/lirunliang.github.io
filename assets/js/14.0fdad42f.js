(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{529:function(t,s,a){"use strict";a.r(s);var n=a(33),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"包装类型跟基本数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#包装类型跟基本数据类型"}},[t._v("#")]),t._v(" 包装类型跟基本数据类型")]),t._v(" "),a("h4",{attrs:{id:"起因：-1-跟-new-number-1-的区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#起因：-1-跟-new-number-1-的区别？"}},[t._v("#")]),t._v(" 起因： 1 跟 new Number(1)的区别？")]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[t._v("两者的区别就是原始类型和包装对象的区别。")])]),t._v(" "),a("h4",{attrs:{id:"基本数据类型跟包装对象的区分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型跟包装对象的区分"}},[t._v("#")]),t._v(" 基本数据类型跟包装对象的区分")]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[a("p",[t._v("在JS中，数字、字符串、布尔、null、undefined以及ES6的Symbol被称之为基本数据类型的数据，其他数据类型都是对象，官方对于基本数据类型的定义是一种既非对象也无方法的数据。")])]),t._v(" "),a("li",[a("p",[t._v("对象中有一类是Number, String, Boolean这三个对象，分别对应数字、字符串、布尔类型，我们称它们为包装对象或包装类型。")])])]),t._v(" "),a("h4",{attrs:{id:"基本数据类型的不可改变的特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本数据类型的不可改变的特性"}},[t._v("#")]),t._v(" 基本数据类型的不可改变的特性")]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[a("p",[t._v("基本数据类型一旦声明之后，那么它就将不可改变了，只能被替换。")])]),t._v(" "),a("li",[a("p",[t._v("这个是因为JS对数据类型的存储方式的原因，在JS中，基本数据类型声明之后是存储在栈中，而不是堆中，所以当你对基本数据类型重新进行计算或者赋值的时候，实际上是重新声明了一个新的基本数据类型，再将这个基本数据类型赋值给了变量")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" test_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ntest_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test_a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 300")]),t._v("\n")])])]),a("ul",[a("li",[t._v("上面的例子中 100 实际上还是存储在栈里面的，但是没有任何一个变量引用他，所以垃圾回收机制会在特定的时间对其进行回收，释放内存。")])]),t._v(" "),a("h3",{attrs:{id:"基本类型的包装对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型的包装对象"}},[t._v("#")]),t._v(" 基本类型的包装对象")]),t._v(" "),a("hr"),t._v(" "),a("ul",[a("li",[a("p",[t._v("基本类型的包装对象是为了让开发者更好地操作基本数据类型而提供的内置对象；")])]),t._v(" "),a("li",[a("p",[t._v("我们知道基本数据类型是没有属性跟方法的，然而我们声明一个字符串或者数字却能点出来它的某个方法，这个是因为我们在调用基本数据类型的方法的时候，js在后台或创建一个对应的数据类型的包装对象实例，再去调这个实例的方法，并返回结果，最后销毁实例；")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" test_a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lirunliang'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个基础数据类型，再栈中保存该值；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" test_b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" test_a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("charAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用了基础数据类型的某个方法，触发了js机制，所以实际上现在js后台执行的是一下代码：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" _str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("test_a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传入基础数据类型的值。实例化一个string对象")]),t._v("\n  test_b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  _str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chaAt")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用该对象的方法，并返回值（返回值存放在栈里，赋值给test_b）")]),t._v("\n  _str "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("                    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 销毁实例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" test_a   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string,数据类型没有发生改变")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" test_b   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// string,数据类型没有发生改变")]),t._v("\n \n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);